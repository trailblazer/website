<%= h2 "Variable Mapping", name: "variable-mapping" %>

Since TRB 2.1 it is possible to define the input and output variables for each step. This is called _variable mapping_, or I/O in short. It provides an interface to define what variable go in and come out of a task, enabling you to limit what steps "see" and what "output" they can add to the context.

It's one of the most frequently used features in Trailblazer.

<%= h3 "Overview" %>

Imagine a complex application where policies are protecting your operation code from unsolicited access. This code component - the policy - sits as a step in every business operation and decides whether or not the current user is permitted to execute this very operation.

<%= code_tabs "no-in" %>

The `Policy::Create` implementation is a simple callable class following the [step interface](#activity-internals-step-interface).

<%= code "policy", collapse: :decision %>

Note that it requires two variables `:model` and `:user` from the ctx. For whatever reasons, the author of this class dictated that the "current user" must be passed named `:user`, not, as it's a convention in Trailblazer, named `:current_user`.

Last, depending on the policy decision, the step code returns true or false.

<%#= h4 "Missing mapping" %>

When executing the `Create` operation using the `:current_user` variable, an `ArgumentError` is raised.

<%= code_tabs "no-in-invoke" %>

Since the "current user" is handed into the operation as the `:current_user` variable, and no other step preceding `Policy::Create` is setting this variable, the step expecting `:user` crashes.

And this is why we need variable mapping in Trailblazer.

<%= h3 "Composable I/o" %>

Variable mapping (short: i/o) can be done manually, with ugly "helper" steps before or after the respective step, or by using `In()`, `Out()` and `Inject()`. Before these helpers got introduced, we used the `:input` and `:output` option - both works, the latter one coming with several drawbacks.

Helpers can be used multiple times, depending on how complex the incoming or outcoming variables are, forming a pipeline of filters around the actual task.

<%= code_tabs "out-array", collapse: "meths" %>

Not only are those input and output pipelines easy to [debug](#activity-variable-mapping-introspect), they also allow to be altered in derived operations, when [using inheritance](#activity-variable-mapping-inheritance), and  work in [combination with macros](#activity-variable-mapping-macro).

<%= h3 "In()" %>

`In()` allows to configure variables going _into_ the step. The helper accepts either a mapping hash, a limiting array or a callable object (often a lambda), to compute variables at runtime.

Be wary that once you **use `In()` your are white-listing**: only the variables defined in your filters will be passed into the step. All other variables from ctx are invisible in the step.

<%= h4 "Mapping hash" %>

Picking up the example from above, here's how a mapping hash "translates" the selected variables from the original ctx object to a new ctx, one that is compatible with `Policy::Create`'s interface.

<%= code "in-mapping", collapse: "meths" %>

The `In()` filter will result in `:current_user` being renamed to `:user`. Since the policy step also needs `:model` we need to mention this variable as well, no renaming happening here. The beauty of I/O: this is only visible to `Policy::Create`!

<%= vite_image_tag "images/ctx-in.png", class: "mx-auto d-block" %>

To instantly see what new ctx is passed into the configured step, you could replace the original policy step with a `#show_ctx` method.

<%= code_tabs "in-mapping-keys" %>

You should use the mapping hash when variables need to be renamed. If variables need to be added without renaming, a limiting array is your friend.

<%= h4 "Limiting array" %>

`In()` accepts an array, listed variables are passed into the new ctx (whether they exist in the original ctx or not!).

<%= code_tabs "in-limit" %>

This configuration will lead to the exact same new ctx for `Policy::Create` as in the [example above](#activity-variable-mapping-in-mapping-hash), producing a new ctx that will look as below.

<%= code :ruby do %>
#=> {
#     :user  => #<User email:...>,
#     :model => #<Song name=nil>}
#   }
<% end %>

<%= h4 "Callable" %>

As always, you may implement your own input filter with any callable object [adhering to the step interface])(#activity-internals-step-interface).

<%= code_tabs "in-callable" %>

Callable `In()` filters **have to** return a hash. This hash will be merged with the other `In()` filters and comprise the new ctx.

And again, when the operation is invoked with a `:current_user`, this will, result in the same new ctx as above.

<%= code :ruby do %>
#=> {
#     :user  => #<User email:...>,
#     :model => #<Song name=nil>}
#   }
<% end %>

However, if `:current_user` is `nil`, `Policy::Create` will raise an exception complaining about the `:user` keyword missing.

<%= h4 "Filter method" %>

Following the TRB option standard, an `In()` filter may even be implemented as an instance method. All you need to do is pass a symbol to `In()`.

<%= code_tabs "in-method" %>

The method needs to expose a step interface just like any other callable.

<%= h4 "Keyword arguments" %>

Both callables and filter methods for `In()` can receive ctx variables as keyword arguments, making it a convenient access and have Ruby perform a loose existance test automatically.

<%= code_tabs "in-kwargs" %>

Keep in mind that when not defaulting the keyword argument your filter might crash at runtime when the expected variables were not passed.

<%= h3 "Out()" %>

Without any output configuration on the exemplary policy step, any variable written to `ctx` will be automatically set on the outer ctx, passing along internal variabes to the following step.

<%= vite_image_tag "images/ctx-out-all.png", class: "mx-auto d-block" %>

Here, both `:status` and `:message` variables that were written in `Policy::Create` are passed into the outer ctx. The behavior is identical to the way before you were using i/o.



However, it is often necessary to rename or limit the outgoing variables of a particular step. Especially when using nested operations you probably don't want the entire nested ctx to be copied into the outer context. This is where output filters enter the stage.

Consider the following updated `Policy::Create` step.

<%= code "policy" %>

Both `ctx[:status]` and `ctx[:message]` will be visible in all steps following `Policy::Create`. This might lead to "misunderstandings" and bugs in more complex applications.

As soon as you use `Out()`, only variables specified through the filters will be merged with the original (outer) ctx and passed on to the next step.

<%= h4 "Limiting array" %>

In order to limit variables added to the outer ctx, `Out()` accepts an array similar to `In()`. Consider this as a whitelisting to specify exposed variables.

<%= code_tabs "out-array" %>

This single `Out()` usage will result in only the `:message` variable being written to the outer ctx that is passed on. The `:status` variable is discarded.

<%= vite_image_tag "images/ctx-out.png", class: "mx-auto d-block" %>

You may pass any number of variables in the limiting array.

<%= h4 "Mapping hash" %>

Renaming variables from the inner to the outer ctx works by providing a mapping hash, where the "old" inner name points to the outer name that you want to use in the operation hosting that step.

<%= code_tabs "out-hash" %>

Here, steps following `Policy::Create` will see a variable `:message_from_policy` merged into the ctx - which is the original `:message`, renamed.

<%= h4 "Callable" %>

An `Out()` filter can be any callable object following the [step interface](#activity-internals-step-interface).

<%= code_tabs "out-callable" %>

The callable receives the inner ctx that just left the actual step, here `Policy::Create`. You may run any Ruby code in the callable, even `if`s.

Note that a callable always must return a hash, which is then merged with the original outer ctx.

Be adviced that it is usually a better idea to maintain multiple smaller `Out()` callables for different variables. You might later decide to override them, debugging will be easier and the code is more maintainable. This was different when `:output` was the only way to filter outgoing variables and you had to create one big hash in a one single filter.

<%= info do %>
You may also use an `:instance_method` to filter outgoing variables, similar to [how it's done with In()](#activity-variable-mapping-in-filter-method).
<% end %>

<%= h4 "Keyword arguments" %>

Just as with `In()` callables can receive keyword arguments.

<%= code_tabs "out-kw" %>

Any variable readable on the inner `ctx` that just left `Policy::Create` is available as a keyword argument for a callable. Note that you need to default it if its presence is not guaranteed.

<%= h4 "Outer context" %>

You can access the outer, original ctx by passing the `:with_outer_ctx` option to `Out()`.

<%= code_tabs "out-outer" %>

While the callable still needs to return a hash that is then merged with the original ctx, it's possible to access variables from the outer ctx through the `:outer_ctx` keyword argument. This allows for merging deeper data structures, such as error objects.

<%= h3 "Inject()" %>

An `Inject()` filter, as opposed to `In()`, does an existance check on the ctx using `ctx.key?(:variable)` before performing its logic. It is helpful in combination with `In()` filters, when using defaulted keyword arguments in a step or in nested operations.

* It allows defaulting a variable when it's absent in the ctx.
* It can pass-through a variable when it is present in the ctx, and only then.
* You can also statically set a variable, whether or not it is present using the `:override` option.

Note that `Inject()` can be used without `In()`.

Check the following exemplary policy code.

<%= code "policy-check", collapse: "decision" %>

This policy implementation uses keyword arguments to automatically extract `:model`, `:user` and `:action` from the ctx. Note that the latter is defaulted to `:create`. Defaulting kwargs only works when the keyword variable is **not passed** into the step - if it's `nil`, the defaulting will not get triggered.

You could now use `In()` filters to embed this policy step into your operation.

<%= code "no-inject", collapse: "meths" %>

However, this will break because the `action` variable will never be defaulted to `:create`. The `In()` filter will _always_ pass `:action` through when calling the policy, even when it's absent.

The `Inject()` helper is designed to handle this case.

<%= h4 "Array style" %>

Use `Inject()` in combination with `In()` to add variables to the filtered ctx, but only when they're present in the outer ctx.

<%= code "inject", collapse: "meths" %>

We call this _qualified pass-through_, it means the `:action` variable will only be passed into the filtered ctx if it exists on `ctx` when the filter is invoked.

<%= h4 "Defaulting" %>

Instead of hard-wiring defaulted keyword arguments into your step implementations, you can configure `Inject()` to set a default value to variables, if they're absent in the ctx.

Here's an example policy without any defaulting in the signature.

<%= code "policy-check-nodef", collapse: :decision %>

Defaulting the `:action` variable via `Inject()` will improve the policy component's reusability.

<%= code "inject-default", collapse: :meths %>

The lambda is executed at runtime, just before the actual step is invoked. It provides access to the ctx object and allows extracting keyword arguments.

<%= h4 "Override" %>

Use the `:override` option to always set a variable, even if it is already present in the incoming `ctx`.

<%= code :inject_override_iso %>

This is helpful to set configuration variables for an activity while still using the well-established keyword argument mechanics. The `Policy::Create` class defines `:action` as a kwarg. This doesn't necessarily mean the user can always inject and dictate the very value. Instead, we can override any injected value with the "hard-coded" `:create` value.

<%= code_tabs "inject-override" %>

The call as below will always use `action: :create`, even if something else is injected.

<%= code_tabs "inject-override-call" %>

<%= h3 "Macro" %>

As all DSL options the `In()`, `Out()` and `Inject()` helpers can be used from macros, providing the macro author a convenient way to define default filters. <%= api "/2.1/docs/activity.html#activity-macro-api" %>

<%= code "macro" %>

In the options hash that a macro must return, you can use the helpers by referencing `Trailblazer::Activity::Railway`. Except for the prefixed constant, there is no difference or limitation to their usage.

They can be extended with options the macro user provides.

<%= code "macro-merge", collapse: :meths %>

The user options will be merged into the macro options, resulting in `:message` being renamed to `:message_from_policy` and copied to `:copied_message`.

<%= info do %>
Before `trailblazer-activity-dsl-linear-1.0.0` and the `In()` and `Out()` helper shipped with it, any `:input` from the user would always override the macro's `:input` option.
<% end %>

<%= h3 "Inheritance" %>

Subclasses can add and remove input and output filters - hence the term _composable_. This is a great tool when inherited operations replace particular steps and need to fine-tune ingoing or returned variables.

Consider the following base operation.

<%= code "inheritance-base", collapse: "meths" %>

It defines two input and one output filter.

A sub operation could now replace the policy step. However, instead of redefining the i/o filters, they can be inherited and extended.

<%= info do %>
As `inherit: [:variable_mapping]` is still an experimental feature, you need to explicitely `extend` the `VariableMapping::Inherit` module into the top-most operation where the inheritance chain should begin.
<% end %>

Here's a potential inheriting operation.

<%= code "inheritance-sub", collapse: "meths" %>

This configuration is adding another `Out()` filter, resulting in a total filter setup as follows in the introspection.

<%= code "sub-pipe" %>

The new `Out()` filter setting `:raw_message_for_admin` is placed behind the inherited filter.


<!--
<%#= h3 "Manual filter" %>

TODO: decompose trick (input )
-->

<%= h3 "Introspect" %>

You can visualize the pipelines around each step by using the `trailblazer-developer` gem.

<%= code "tw-render" %>

This handy invocation will render the task wrap around `Song::Operation::Create`'s step `:policy`.

<%= code "tw-render-out" %>

In i/o context, the interesting branches here are `task_wrap.input` and `task_wrap.output`. Sandwiched between generic library steps are your filter steps. The visualizer even renders filter configuration where possible.

<%= info do %>
We're planning improvements on this part of `trailblazer-developer`. If you want to help out with better rendering, please [come chat to us](https://trailblazer.zulipchat.com).
<% end %>
