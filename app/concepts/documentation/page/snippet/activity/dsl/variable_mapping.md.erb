<%= h3 "Input / Output" %>

<%= info do %>
With `trailblazer-2.1.1` and the bundled `trailblazer-activity-dsl-linear-1.0.0` gems, the recommended way of I/O is using [composable variable mapping]() via `In()` and `Out()`.
<% end %>

Before the introduction of the composable `In()`, `Out()` and `Inject()` filters, variable mapping was done with the `:input` and `:output` option. This is still supported and not planned to be dropped. However, there are a bunch of drawbacks with using the monolithic, non-composable options.

* Once used, the `:input`, `:output` and `:inject` option will overwrite any options set earlier (or later) via `In()`, `Out()` and `Inject()`. This will often lead to problems when using macros.
* The superseded options are basically impossible to debug, whereas the composable `In()` approach can [nicely display the computed set](#activity-variable-mapping-introspect) of variables going in or out of a step.
* In future versions of Trailblazer we're planning automatic "contracts" for steps along with type checking. This is not possible with the monolithic `:input` option.

<%= h4 ":input" %>

The `:input` option accepts any callable following the option interface.

<%= code :ruby do %>
step :create_model,
  input: :input_for_create_model
  # becomes
  In() => :input_for_create_model
<% end %>

`:input` works identically to a single `In()` call. <%= api "#activity-variable-mapping-in-" %>

<%= h4 ":output" %>

The `:output` option, just like `:input`, accepts any callable following the option interface.

<%= code :ruby do %>
step :create_model,
  output: :output_for_create_model
  # becomes
  Out() => :output_for_create_model
<% end %>

`:output` works identically to a single `Out()` call. <%= api "#activity-variable-mapping-out-" %>

The `:output_with_outer_ctx` option is [documented here](#activity-variable-mapping-out-outer-context).

<%= code :ruby do %>
step :create_model,
  output: :output_for_create_model,
  output_with_outer_ctx: true
  # becomes
  Out(with_outer_ctx: true) => :output_for_create_model
<% end %>

<%= h4 ":inject" %>

`:inject` works identically to a single `Inject()` call. <%= api "#activity-variable-mapping-inject-" %>

<%= code :ruby do %>
step :create_model,
  inject: :inject_for_create_model
  # becomes
  Inject() => :inject_for_create_model
<% end %>

<%= h2 "Dependency Injection" %>

<%= info do %>
WIP: This section is not final, yet.
<% end %>

<%= h3 "Overview" %>

Very often your activity or one of the steps contained require particular objects and values to get their job done. Instead of hard-wiring those _"dependencies"_ in the code it is good style to allow providing those objects by passing them into the activity at run-time. This is called dependency injection and is a [common technique](https://en.wikipedia.org/wiki/Dependency_injection) in software engineering.

One way for using dependency injection is using keyword arguments for variables you need, and defaulting those in the step signature.

<%= h3 "Mapping" %>
TODO

<%= h3 "Dry container" %>
TODO

defaulting in macros
