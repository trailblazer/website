<%= h2 "TaskWrap" %>

The _taskWrap_ is the "`around_filter`" of Trailblazer. It allows adding steps before and after actual tasks without having to change the activity, and without having to introduce `if`s.

Some prominent examples for taskWrap usage in the wild are the [`:input`/`:output` variable mapping](https://github.com/trailblazer/trailblazer-activity-dsl-linear/blob/f54ce384f57dde063f77a769487fc38023217910/lib/trailblazer/activity/dsl/linear/variable_mapping.rb) and tracing happening in [`#wtf?`](https://github.com/trailblazer/trailblazer-developer/blob/de84d67ac390fee5e98ffc0a172cf80141e06c81/lib/trailblazer/developer/trace.rb).

<%= vite_image_tag "images/task-wrap.webp", class: "mx-auto d-block" %>

You can maintain a taskWrap for each specific task of an activity, or run the same "around steps" for every task, even in nested activities. Also, taskWraps can be configured statically at compile-time or defined dynamically at run-time, which is how tracing in `#wtf?` works.

<%= h3 "Runtime" %>

At run-time, any taskWrap can be injected using `:wrap_runtime`. However, the taskWrap needs to be set up beforehand.

Consider the following operation, or activity.

<%= code "op-run", collapse: "meth" %>

In order to invoke your own logger before every task (including the `Create` activity itself), you need to define a taskWrap extension and a taskWrap step for the actual logging.

<%= h4 "taskWrap step" %>

A taskWrap step looks very similar to a normal step but has a slightly different interface.

<%= code "run-logger" %>

Note that the first positional argument is `wrap_ctx` which is a taskWrap-specific datastructure. It contains the `:task` variable which is the currently "invoked" step of your operation.

The second positional argument is `original_args`, which are the circuit-interface arguments that are being passed to the actual step. Depending on whether your taskWrap step is placed before or after the actual step, you can change the `ctx`, add or remove variables, or completely change what's being passed around.

It is important to always return an array `[wrap_ctx, original_args]`.

<%= info do %>
You don't have to mutate structures in the taskWrap. The example shows a convenient version. Anyway, you can build your own `ctx` and return the respective new structures from the taskWrap step.
<% end %>

<%= h4 "Extension" %>

Before injecting, you need to build a taskWrap extension.

<%= code "run-merge" %>

This might look a bit clumsy, but this API is not designed for people who don't know what they're doing. Feel special.

* Each item in the `merge` array is a taskWrap you want to add.
* The `"task_wrap.call_task"` is the taskWrap step which invokes the actual step, e.g. `Create#model`.
* You can configure taskWrap steps for specific steps. In this example, we want the taskWrap to be invoked for every step, that's why we use `Hash.new(wrap)`.
* The hash passed as `wrap_runtime` can contain specific wraps like `{my_task => my_specific_taskwrap}`, but in our example will always return the same taskWrap for each step.

<%= h4 "Invoke" %>

The taskWrap needs to be injected into the activity's `invoke`, following the [circuit-interface](/2.1/docs/activity.html#activity-internals-circuit-interface).

<%= code "run-invoke" %>

You can now inspect the `ctx[:log]` field to see that your `log_before` has been called for each step, including the activity itself.

<%= code "run-puts" %>

Using the `:wrap_runtime` feature is a beautiful way to add behavior around steps without having to use any decider or `if`s.

<%= h3 "Static" %>


    ext = Trailblazer::Activity::TaskWrap::Extension(
      [method(:add_1), id: "user.add_1", prepend: "task_wrap.call_task"]
    )

# old
    ext = Trailblazer::Activity::TaskWrap::Extension::WrapStatic.new(extension: ext)
# new
    merge = [
      [method(:add_1), id: "user.add_1", prepend: "task_wrap.call_task"],
      [method(:add_2), id: "user.add_2", append:  "task_wrap.call_task"],
    ]

    abc_implementation, _es = abc_implementation(a_extensions: [TaskWrap::Extension.WrapStatic(*merge)])







Example tracing
https://gist.github.com/matheusca/893dc965bd06c97625b2cb2adae418b4#file-test-rb-L22




example :if
