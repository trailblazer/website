<%= h2 "Overview" %>

<a href="https://github.com/trailblazer/trailblazer-macro" class="pink"><i class="fa fa-gem" aria-hidden="true"></i> trailblazer-macro >= 2.1.11</a>

Macros provide shorthand methods to create and configure a particular step in your operation. Trailblazer ships with a handful of macros. Those are implemented in trailblazer-macro and trailblazer-macro-contract.

Writing you own macros is a very simple thing to do if you follow the macro API. <%= api "/2.1/docs/activity.html#activity-macro-api" %>


<%= h3 "General notes" %>

<%= h4 "Variable mapping" %>

Most macros internally use [variable mapping](/2.1/docs/activity.html#activity-variable-mapping) to allow injection of configuration variables or to limit their own scope. Macros do so by leveraging the composable API using `In()`, `Inject()` and `Out()`.

This allows you to _add your own_ variable mapping to a macro, as illustrated in the example below.

<%= code "in" %>

When running the above operation, the exemplary `Model()` macro will pick the ID from `:my_id`.

<%= code "in-call" %>

Please note that you shall **not use `:input`** to configure your macro as it will override internal filters and breaks the macro's configuration. Go with the new [composable variable mapping](/2.1/docs/activity.html#activity-variable-mapping-composable-i-o) which is available from `trailblazer` 2.1.1 and onwards.
