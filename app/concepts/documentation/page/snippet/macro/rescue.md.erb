<%= h2 "Rescue" %>

While you could be implementing your own `begin/rescue/end` mechanics using [`Wrap`](#wrap), Trailblazer offers you the `Rescue()` macro to catch and handle exceptions that might occur while running any series of steps.

<%= code "no-args", collapse: "methods" %>

Any exception raised during a step in the `Rescue` block will cause the execution to stop, and continues after the block on the left (or `failure`) track.

<%= h3 "Options" %>

You can specify what particular exceptions to catch and an optional handler that is called when an exception is encountered.

<%= code "rescue", collapse: "methods" %>

The handler's `#call` method receives the exception and the circuit-interface arguments.

<%= code "rescue-handler", collapse: "methods" %>

Alternatively, you can use a  `Callable` object for `:handler`.

<%= h3 "Full example" %>

The  `Nested`, `Wrap` and `Rescue` macros can also be nested, allowing an easily extendable business workflow with error handling along the way.

TODO: add example
