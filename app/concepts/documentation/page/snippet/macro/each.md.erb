<%= h2 "Each" %>

<a href="https://github.com/trailblazer/trailblazer-macro" class="pink"><i class="fa fa-gem" aria-hidden="true"></i> trailblazer-macro >= 2.1.12</a>

The `Each()` macro allows to loop over a dataset while invoking a particular operation per iteration, as if multiple identical operations were serially connected, but receiving different input ctxs.

<%= code "each-pure", collapse: :meths %>

You can either pass a block with steps to iterate, or an entire operation/activity. In this example, a block is used. Note that you need to use the `{}` curly braces due to Ruby's precedence, just as it's done in `Wrap()`.

<%= h3 "dataset_from" %>

While you could simply assign a ctx variable `:dataset` in a step preceding the `Each()` macro, the recommended way is using `:dataset_from` and implementing a dedicated dataset provider.

<%= code "each-pure-macro" %>

This can be an instance method or any kind of callable, following the "decider interface".

<%= code :dataset_from %>

Note that our dataset provider is an instance method `#composers_for_each` defined on the operation class hosting `Each()`. It exposes a step signature with ctx and handy keyword arguments and simply returns the dataset. It explicitely does not write to `ctx`!

The only requirement to the dataset provider's return value is that it returns an enumerable object - usually, that's an array.

<%= h3 "Iterated Block" %>

Note that the iterated block's `:instance_method`s are defined in the `Each()`-hosting activity, too.

<%= code "iterated" %>

Per default, `Each()` will loop over the dataset using `#each` and pass the iterated item and its index into each step of the block, named `:item` and `:index`.

<%= h4 "item key" %>

If you don't like the `:item` keyword argument in your steps, you can configure it using the `:item_key` option for `Each()`.

<%= code "item_key" %>

The iterated steps now receive a `:composer` ctx variable instead of `:item`.

<%= code "composer", collapse: :meths %>

<%= h4 "operation" %>

If you would like the iterated steps to be within the "block", use a dedicted activity or operation.

<%= code "operation", collapse: :meths %>

The iterated operation is composed of steps that have an identical interface with the block version.

<%= code "operation-class", collapse: :meths %>

<%= h3 "Collect option" %>

Ctx variables set within an iteration [are discarded per default](#macro-each-variable-mapping). While you could configure [collecting values yourself](#macro-each-variable-mapping-filtering), you can use the `:collect` option.

<%= code "each-dataset" %>

If one of your iterated steps sets `ctx[:value]` within `Each()`, this value will be collected.

<%= code "iterated" %>

All collected values are available at `ctx[:collected_from_each]` when `Each()` is finished.

<%= code :collected_from_each %>

<%= h3 "Variable mapping" %>

The `Each()` macro allows to configure what goes in and out of each iteration. However, it provides a default setting.

<%= code "write_to_ctx" %>

* Per default, the iterated steps can see the entire outer `ctx`, plus `:index` and `:item`.
* Any variable written to `ctx` is discarded after the iteration.

<%= code "write", collapse: :meths %>

This default setting assures that no data from the iteration bleeds into the outer ctx.

<%= h4 "Filtering" %>

You may configure what goes in and out of the iterated activity. Use the variable mapping API by passing arguments to `Each()`.

For example, say you want to collect messages from each iteration.

<%= code "inject", collapse: :meths %>

1. When starting the iteration, the ctx variable `:messages` will be initialized to an empty hash (unless you provide it in the outside ctx).
2. The `#write_to_ctx` step within `Each()` sees that `:messages` variable and can override it, adding its non-sense message to the hash.
3. Since you configured `Out() => [:messages]`, the following iteration will see that very `:messages` variable from the last iteration.

This allows to collect outgoing variables from the iterations, even in case of failures.

<%= info do %>
Note how the `Inject()` and `Out()` calls are within the parenthesis of `Each()`.
<% end %>

<%= h3 "Failure" %>

If not configured, a failing iterated step leads the entire iteration to be stopped. The `Each()` activity will terminate on its `failure` terminus.

You can still access `ctx[:collected_from_each]` for each iterated block. Note that you can even see which iteration failed in the trace!

<%= vite_image_tag "images/each-failure-trace.png", class: "mx-auto d-block" %>

In combination with TRB's debugger, this gives you a powerful tool for finding bugs in your code or understanding the flow, without having to jump around through iterations using `pry` or other tools.


<%= h3 "Debugging" %>

TODO: show how runtime data can be accessed for each iterated block.
