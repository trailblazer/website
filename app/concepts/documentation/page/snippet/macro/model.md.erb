<%= h2 "Model" %>

An operation can automatically find or create a model for you depending on the input, with the `Model` macro.

<%= code "op" %>

After this step, there is a fresh model instance under `ctx[:model]` that can be used in all following steps and the returned `result` object.

<%= code "create" %>

Internally, `Model` macro will simply invoke `Song.new` to populate `ctx[:model]`.

<%= h3 "Find_by" %>

You can also find models using `:find_by`. This is helpful for `Update` or `Delete` operations.

<%= code "update" %>

The `Model` macro will invoke the following code for you.

<%= code :ruby do %>
ctx[:model] = Song.find_by( id: params[:id] )
<% end %>

This will assign `[:model]` for you by invoking `find_by`.

<%= code "update-ok" %>

If `Song.find_by` returns `nil`, this will deviate to the left track, skipping the rest of the operation.

<%= code "update-fail" %>

It is also possible to `find_by` with attribute other than `id`. For example,

<%= code "update-with-find-by-key" %>

Note that you may also use `:find`. This is not recommended, though, since it raises an exception, which is not the preferred way of flow control in Trailblazer.

<%= h3 "Arbitrary Finder" %>

It's possible to specify any finder method, which is helpful with ROMs such as Sequel.

<%= code "show" %>

The provided method will be invoked and Trailblazer passes it the `params[:id]` value.

<%= code :ruby do %>
Song[ params[:id] ]
<% end %>

Given your database gem provides that finder, it will result in a successful query.

<%= code "show-ok" %>

<%= h3 "Not Found" %>

With the help of [endpoint](/2.1/docs/endpoint.html), it is possible to connect failure of this step to render **404 response** directly.
As a result, you don't need to conditionally check if `ctx[:model]` is present or not.

<%= vite_image_tag "images/macro-ends.webp", class: "mx-auto d-block" %>

To emit `End.not_found` signal, you need to pass `not_found_terminus` kwarg.

<%= code "update-with-not-found-end" %>

Internally, it is just telling [`Output(:failure)`](/2.1/docs/activity.html#activity-wiring-api-output-implicit-signal) to emit [`End(:not_found)`](/2.1/docs/activity.html#activity-wiring-api-end-)

<%= code "update-with-not-found-end-use" %>

<%= h3 "Dependency Injection" %>

The following `Model()` options can be injected using variables when `call`ing the operation.

* `:"model.class"` which represents the first argument for `Model()`.
* `:"model.action"` representing the second argument.
* `:"model.find_by_key"` which represents the third argument.

As per your design, you may inject one or more of those variables as follows.

<%= code "di-all" %>

You can even leave `Model()` entirely unconfigured.

<%= code "op-model-empty" %>

This implies you inject all required variables at run-time.

<%= h4 "Model class" %>

Usually, the specific model class for `Model()` is set directly in the macro.

<%= code "op" %>

Nevertheless, it's possible to override it using the `:"model.class"` variable when invoking the operation/activity.

<%= code "di-model-class" %>

Note that you [don't have  to configure]() any model class at all when injecting it.

