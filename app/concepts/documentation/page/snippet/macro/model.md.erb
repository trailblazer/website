<%= h2 "Model" %>


<%= info do %>
The `Model()` macro will be deprecated and removed in Trailblazer 2.2. Please switch over to the more powerful `Model::Find` and friends.
<% end %>

An operation can automatically find or create a model for you using the `Model()` macro.

<%= code_tabs "op" %>

After this step, there is a fresh model instance under `ctx[:model]` that can be used in all following steps and the returned result object.

<%= code_tabs "create", sub: ", seq: []" %>

Internally, the `Model()` macro will simply invoke `Song.new` to populate `ctx[:model]`.

<%= h3 "Find_by" %>

You can also find models using `:find_by`. This is helpful for `Update` or `Delete` operations.

<%= code_tabs "update" %>

The `Model` macro will invoke the following code for you.

<%= code :ruby do %>
ctx[:model] = Song.find_by(id: params[:id])
<% end %>

This will assign `ctx[:model]` for you by invoking `find_by`.

<%= code_tabs "update-ok" %>

If `Song.find_by` returns `nil`, this will deviate to the failure track, skipping the rest of the operation.

<%= code_tabs "update-fail" %>

<%= h4 "Key" %>

It is also possible to `find_by` using an attribute other than `:id`.

<%= code_tabs "update-with-find-by-key" %>

<%= h4 "find" %>

Note that, instead of `find_by`, you may also use `:find`. This is not recommended, though, since it raises an exception, which is not the preferred way of flow control in Trailblazer.

<%= h3 "Arbitrary Finder" %>

It's possible to specify any finder method, which is helpful with ROMs such as Sequel.

<%= code_tabs "show" %>

The provided method will be invoked and Trailblazer passes to it the value of`params[:id]`.

<%= code :ruby do %>
Song[params[:id]]
<% end %>

Given your database gem provides that finder, it will result in a query.

<%= code_tabs "show-ok" %>

<%= h3 "Not Found" %>

You can wire the `Model()` step to a dedicated terminus `:not_found` in case of a missing model, instead of connecting it to the default failure track. The new terminus represents an explicit outcome and could, for instance, be used in an [endpoint](/2.1/docs/endpoint.html) to render a **404 response** without having to check if `ctx[:model]` is present or not.

<%= vite_image_tag "images/model-not-found.png", class: "mx-auto d-block" %>

To add the explicit `End.not_found`terminus, pass the `:not_found_terminus` option to the macro.

<%= code_tabs "update-with-not-found-end" %>

When running the `Update` activity with an invalid ID, it terminates on `End.not_found`.

<%= code_tabs "not_found" %>

<%= h3 "Dependency Injection" %>

The following `Model()` options can be injected using variables when `call`ing the operation.

* `:"model.class"` which represents the first argument for `Model()`.
* `:"model.action"` representing the second argument.
* `:"model.find_by_key"` which represents the third argument.

As per your design, you may inject one or more of those variables as follows.

<%= code_tabs "di-all" %>

You can even leave `Model()` entirely unconfigured.

<%= code_tabs "op-model-empty" %>

This implies you inject all required variables at run-time.

<%= h4 "Model class" %>

Usually, the specific model class for `Model()` is set directly in the macro.

<%= code_tabs "op" %>

Nevertheless, it's possible to override it using the `:"model.class"` variable when invoking the operation/activity.

<%= code_tabs "di-model-class", sub: ", seq: []" %>

Note that you [don't have  to configure]() any model class at all when injecting it.

