<%= h2 "Validation" %>

Validation in Reform happens in the `validate` method, and only there.

Reform will deserialize the fragments and their values to the form and its nested subforms, and once this is done, run validations.

It returns the result boolean, and provide potential errors via `errors`.

<%= h3 "Validation Engine" %>

Since Reform 2.0, you can pick your validation engine. This can either be `ActiveModel::Validations` or `dry-validation`. The validation examples included on this page are using `dry-validation`.

<div class="callout secondary">
  <p>
    Reform 2.2 drops <code>ActiveModel</code>-support. You can still use it (and it will work!), but we won't maintain it actively, anymore. In other words, <code>ActiveModel::Validations</code> and Reform should be working until at least Reform 4.0.
  </p>
</div>

Note that you are not limited to one validation engine. When switching from `ActiveModel::Validation` to `dry-validation`, you should set the first as the default validation engine.

<%= nav_tabs do |tab| %>
  <%= tab.(title: 'Rails', active: true) do %>
    config.reform.validations = :active_model

  The configuration assumes you have `reform-rails` installed.
  <% end %>

  <%= tab.(title: 'Ruby') do %>
      Reform::Form.send(:include, Reform::Form::ActiveModel::Validations)

  In a Ruby environment, you'd usually monkey-patch the `Form` class.
  <% end %>
<% end %>

In forms you're upgrading to dry-validation, you can include the validation module explicitly.

    require 'reform/form/dry'

    <%= code 'basic' %>

This replaces the ActiveModel backend with dry for this specific form class, only.


<%= h3 "Validation Groups" %>

Grouping validations enables you to run them conditionally, or in a specific order. You can use `:if` to specify what group had to be successful for it to be validated.

  <%= code 'validation_groups' %>

This will only check for the `artist` presence as well only if the `:default` group was valid.
Chaining groups works via the `:after` option. This will run the group regardless of the former result. Note that it still can be combined with `:if`.

At any time you can extend an existing group using `:inherit` (this feature is not compatible with dry-validation 1.x, to avoid any hacky solution we are waiting dry-v authors to implement it from their end first).

    validation :email, inherit: true do
      params { required(:email).filled }
    end

This appends validations to the existing `:email` group.

<%= h3 "Dry-validation" %>

Dry-validation is the preferred backend for defining and executing validations.

The purest form of defining validations with this backend is by using a [validation group](#reform-validation-validation-groups). A group provides the exact same API as a `Dry::Validation::Schema`. You can learn all the details on the [gem's website](https://github.com/dryrb/dry-validation).

<%= code 'basic_with_rules' %>

The validation block is what dry-v calls contract which can contains `params`, `rule` and `config`.

`params` is a dry-v `Schema` and will contain all the basic built in predicates, instead in the `rule` block is where is possible to implement custom predicates.
Remember that the `rule` block will not be executed in case the relative schema does not pass the validations. The `form` object is always passed into the `validation` block and it can be exposed using `option :form`.


Make sure to read the [documentation](http://dry-rb.org/gems/dry-validation) for dry-validation, as it contains some very powerful concepts like high-level rules that give you much richer validation semantics as compared to AM:V.

#### Dry: Error Messages

You need to provide custom error messages via dry-validation mechanics.

    validation :default do
      config.messages.load_paths << 'config/error_messages.yml'
    end

This is automatically configured to use the I18n gem if it's available, which is true in a Rails environment.

A simple error messages file might look as follows.

    en:
      errors:
        same_password?: "passwords not equal"

<%= h3 "ActiveModel" %>

In Rails environments, the AM support will be automatically loaded.

In other frameworks, you need to include `Reform::Form::ActiveModel::Validations` either into a particular form class, or simply into `Reform::Form` and make it available for all subclasses.


    require "reform/form/active_model/validations"

    Reform::Form.class_eval do
      feature Reform::Form::ActiveModel::Validations
    end


#### Uniqueness Validation

Both ActiveRecord and Mongoid modules will support "native" uniqueness support where the validation is basically delegated to the "real" model class. This happens when you use `validates_uniqueness_of` and will respect options like `:scope`, etc.


    class SongForm < Reform::Form
      include Reform::Form::ActiveRecord
      model :song

      property :title
      validates_uniqueness_of :title, scope: [:album_id, :artist_id]
    end

Be warned, though, that those validators write to the model instance. Even though this _usually_ is not persisted, this will mess up your application state, as in case of an invalid validation your model will have unexpected values.

This is not Reform's fault but a design flaw in ActiveRecord's validators.

#### Unique Validation

You're encouraged to use Reform's non-writing `unique: true` validation, though.


    require "reform/form/validation/unique_validator"

    class SongForm < Reform::Form
      property :title
      validates :title, unique: true
    end


This will only validate the uniqueness of `title`.

For uniqueness validation of multiple fields, use the `:scope` option.

~~~ ruby
validates :user_id, unique: { scope: [:user_id, :song_id] }
~~~

Feel free to [help us here](https://github.com/trailblazer/reform-rails/blob/master/lib/reform/form/validation/unique_validator.rb)!

#### Confirm Validation

Likewise, the `confirm: true` validation from ActiveResource is considered dangerous and should not be used. It also writes to the model and probably changes application state.

Instead, use your own virtual fields.


    class SignInForm < Reform::Form
      property :password, virtual: true
      property :password_confirmation, virtual: true

      validate :password_ok? do
        errors.add(:password, "Password mismatch") if password != password_confirmation
      end
    end


This is discussed in the _Authentication_ chapter of the [Trailblazer book](https://leanpub.com/trailblazer).

<%= h3 "Validations For File Uploads" %>

In case you're processing uploaded files with your form using CarrierWave, Paperclip, Dragonfly or Paperdragon we recommend using the awesome [file_validators](https://github.com/musaffa/file_validators) gem for file type and size validations.

    class SongForm < Reform::Form
      property :image

      validates :image, file_size: {less_than: 2.megabytes},
        file_content_type: {allow: ['image/jpeg', 'image/png', 'image/gif']}
