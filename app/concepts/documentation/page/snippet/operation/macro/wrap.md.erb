<%= h3 "Wrap" %>

Steps can be wrapped by an embracing step. This is necessary when defining a set of steps to be contained in a database transaction or a database lock.


The `Wrap` macro helps you to define the wrapping code (such as a `Sequel.transaction` call) and allows you to define the wrapped steps. (Because of the precedence works in Ruby, you need to use `{...}` instead of `do...end`.)


As always, you can have steps before and after `Wrap` in the pipe.

The proc passed to `Wrap` will be called when the step is executed, and receives `block`. `block.call` will execute the nested pipe.

You may have any amount of `Wrap` nesting.

<%= h4 "Callable" %>

For reusable wrappers, you can also use a `Callable` object.
 "transaction-handler"%>

This can then be passed to `Wrap`, making the flow extremely readable.

<%= h4 "Return Value" %>

All nested steps will simply be executed as if they were on the "top-level" track, but within the wrapper code. Steps may deviate to the left track, and so on.

However, the last signal of the wrapped pipe is not simply passed on to the "outer" pipe. The return value of the actual `Wrap` block is crucial: If it returns falsey, the pipe will deviate to left after `Wrap`.


In the above example, regardless of `Sequel.transaction`'s return value, the outer pipe will deviate to the left track as the `Wrap`'s return value is always `false`.

TODO: document how you can wire
